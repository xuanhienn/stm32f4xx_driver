
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000808  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080009b0  080009b0  000109b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009bc  080009bc  000109c4  2**0
                  CONTENTS
  4 .ARM          00000000  080009bc  080009bc  000109c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009bc  080009c4  000109c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009bc  080009bc  000109bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009c0  080009c0  000109c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000109c4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000109c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000143e  00000000  00000000  000109f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000435  00000000  00000000  00011e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000168  00000000  00000000  00012268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000130  00000000  00000000  000123d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002136  00000000  00000000  00012500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000017b4  00000000  00000000  00014636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008e1e  00000000  00000000  00015dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001ec08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000508  00000000  00000000  0001ec58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000998 	.word	0x08000998

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000998 	.word	0x08000998

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI2_GPIOInits>:
// PB15 -> MOSI
// PB14 -> MISO
// PB13 -> SCLK
// PB12 -> NSS
void SPI2_GPIOInits(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t pGPIOHandle;
	pGPIOHandle.pGPIOx = GPIOB;
 80001fe:	4b14      	ldr	r3, [pc, #80]	; (8000250 <SPI2_GPIOInits+0x58>)
 8000200:	607b      	str	r3, [r7, #4]
	pGPIOHandle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	pGPIOHandle.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000206:	2305      	movs	r3, #5
 8000208:	737b      	strb	r3, [r7, #13]
	pGPIOHandle.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800020a:	2300      	movs	r3, #0
 800020c:	733b      	strb	r3, [r7, #12]
	pGPIOHandle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800020e:	2300      	movs	r3, #0
 8000210:	72fb      	strb	r3, [r7, #11]
	pGPIOHandle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000212:	2303      	movs	r3, #3
 8000214:	72bb      	strb	r3, [r7, #10]

	//sclk
	pGPIOHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000216:	230d      	movs	r3, #13
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&pGPIOHandle);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f8ed 	bl	80003fc <GPIO_Init>

	//MOSI
	pGPIOHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000222:	230f      	movs	r3, #15
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&pGPIOHandle);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f8e7 	bl	80003fc <GPIO_Init>

	//MISO
	pGPIOHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800022e:	230e      	movs	r3, #14
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&pGPIOHandle);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f8e1 	bl	80003fc <GPIO_Init>

	//NSS
	pGPIOHandle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800023a:	230c      	movs	r3, #12
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&pGPIOHandle);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f8db 	bl	80003fc <GPIO_Init>
}
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40020400 	.word	0x40020400

08000254 <SPI2_Init>:
void SPI2_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 800025a:	4b0c      	ldr	r3, [pc, #48]	; (800028c <SPI2_Init+0x38>)
 800025c:	603b      	str	r3, [r7, #0]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800025e:	2301      	movs	r3, #1
 8000260:	717b      	strb	r3, [r7, #5]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000262:	2301      	movs	r3, #1
 8000264:	713b      	strb	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 8000266:	2300      	movs	r3, #0
 8000268:	71bb      	strb	r3, [r7, #6]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800026a:	2300      	movs	r3, #0
 800026c:	71fb      	strb	r3, [r7, #7]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800026e:	2300      	movs	r3, #0
 8000270:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000272:	2300      	movs	r3, #0
 8000274:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EN;
 8000276:	2301      	movs	r3, #1
 8000278:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2Handle);
 800027a:	463b      	mov	r3, r7
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fa63 	bl	8000748 <SPI_Init>
}
 8000282:	bf00      	nop
 8000284:	3720      	adds	r7, #32
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40003800 	.word	0x40003800

08000290 <main>:
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	char user_data[] = "hello world";
 8000296:	4a0c      	ldr	r2, [pc, #48]	; (80002c8 <main+0x38>)
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	ca07      	ldmia	r2, {r0, r1, r2}
 800029c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    SPI2_GPIOInits();
 80002a0:	f7ff ffaa 	bl	80001f8 <SPI2_GPIOInits>
    SPI2_Init();
 80002a4:	f7ff ffd6 	bl	8000254 <SPI2_Init>
    SPI_PeripheralControl(SPI2, ENABLE);
 80002a8:	2101      	movs	r1, #1
 80002aa:	4808      	ldr	r0, [pc, #32]	; (80002cc <main+0x3c>)
 80002ac:	f000 fae8 	bl	8000880 <SPI_PeripheralControl>
    //enable
    SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	4618      	mov	r0, r3
 80002b4:	f7ff ff98 	bl	80001e8 <strlen>
 80002b8:	4602      	mov	r2, r0
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4619      	mov	r1, r3
 80002be:	4803      	ldr	r0, [pc, #12]	; (80002cc <main+0x3c>)
 80002c0:	f000 fb0e 	bl	80008e0 <SPI_SendData>

    while(1);
 80002c4:	e7fe      	b.n	80002c4 <main+0x34>
 80002c6:	bf00      	nop
 80002c8:	080009b0 	.word	0x080009b0
 80002cc:	40003800 	.word	0x40003800

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f000 fb27 	bl	8000950 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ffc5 	bl	8000290 <main>

08000306 <LoopForever>:

LoopForever:
  b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000314:	080009c4 	.word	0x080009c4
  ldr r2, =_sbss
 8000318:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800031c:	2000001c 	.word	0x2000001c

08000320 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC_IRQHandler>
	...

08000324 <GPIO_PeriClockControl>:
 */
#include "stm32f4xx_gpio_driver.h"
#include "stm32f4xx.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d14b      	bne.n	80003ce <GPIO_PeriClockControl+0xaa>
	{
		if(pGPIOx == GPIOA)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a28      	ldr	r2, [pc, #160]	; (80003dc <GPIO_PeriClockControl+0xb8>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d106      	bne.n	800034c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <GPIO_PeriClockControl+0xbc>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000342:	4a27      	ldr	r2, [pc, #156]	; (80003e0 <GPIO_PeriClockControl+0xbc>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	6313      	str	r3, [r2, #48]	; 0x30
	}
	else
	{

	}
}
 800034a:	e040      	b.n	80003ce <GPIO_PeriClockControl+0xaa>
		else if(pGPIOx == GPIOB)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a25      	ldr	r2, [pc, #148]	; (80003e4 <GPIO_PeriClockControl+0xc0>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000354:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <GPIO_PeriClockControl+0xbc>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000358:	4a21      	ldr	r2, [pc, #132]	; (80003e0 <GPIO_PeriClockControl+0xbc>)
 800035a:	f043 0302 	orr.w	r3, r3, #2
 800035e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000360:	e035      	b.n	80003ce <GPIO_PeriClockControl+0xaa>
		else if(pGPIOx == GPIOC)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a20      	ldr	r2, [pc, #128]	; (80003e8 <GPIO_PeriClockControl+0xc4>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d106      	bne.n	8000378 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800036a:	4b1d      	ldr	r3, [pc, #116]	; (80003e0 <GPIO_PeriClockControl+0xbc>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	4a1c      	ldr	r2, [pc, #112]	; (80003e0 <GPIO_PeriClockControl+0xbc>)
 8000370:	f043 0304 	orr.w	r3, r3, #4
 8000374:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000376:	e02a      	b.n	80003ce <GPIO_PeriClockControl+0xaa>
		else if(pGPIOx == GPIOD)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <GPIO_PeriClockControl+0xc8>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000380:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <GPIO_PeriClockControl+0xbc>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000384:	4a16      	ldr	r2, [pc, #88]	; (80003e0 <GPIO_PeriClockControl+0xbc>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038c:	e01f      	b.n	80003ce <GPIO_PeriClockControl+0xaa>
		else if(pGPIOx == GPIOE)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a17      	ldr	r2, [pc, #92]	; (80003f0 <GPIO_PeriClockControl+0xcc>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <GPIO_PeriClockControl+0xbc>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039a:	4a11      	ldr	r2, [pc, #68]	; (80003e0 <GPIO_PeriClockControl+0xbc>)
 800039c:	f043 0310 	orr.w	r3, r3, #16
 80003a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a2:	e014      	b.n	80003ce <GPIO_PeriClockControl+0xaa>
		else if(pGPIOx == GPIOF)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a13      	ldr	r2, [pc, #76]	; (80003f4 <GPIO_PeriClockControl+0xd0>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <GPIO_PeriClockControl+0xbc>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b0:	4a0b      	ldr	r2, [pc, #44]	; (80003e0 <GPIO_PeriClockControl+0xbc>)
 80003b2:	f043 0320 	orr.w	r3, r3, #32
 80003b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b8:	e009      	b.n	80003ce <GPIO_PeriClockControl+0xaa>
		else if(pGPIOx == GPIOG)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <GPIO_PeriClockControl+0xd4>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d105      	bne.n	80003ce <GPIO_PeriClockControl+0xaa>
			GPIOG_PCLK_EN();
 80003c2:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <GPIO_PeriClockControl+0xbc>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a06      	ldr	r2, [pc, #24]	; (80003e0 <GPIO_PeriClockControl+0xbc>)
 80003c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40020000 	.word	0x40020000
 80003e0:	40023800 	.word	0x40023800
 80003e4:	40020400 	.word	0x40020400
 80003e8:	40020800 	.word	0x40020800
 80003ec:	40020c00 	.word	0x40020c00
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40021400 	.word	0x40021400
 80003f8:	40021800 	.word	0x40021800

080003fc <GPIO_Init>:
//

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	// enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2101      	movs	r1, #1
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff ff8a 	bl	8000324 <GPIO_PeriClockControl>
	//1. configure the mode of the gpio pin

	uint32_t temp = 0; //temp register
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	795b      	ldrb	r3, [r3, #5]
 8000418:	2b03      	cmp	r3, #3
 800041a:	d81f      	bhi.n	800045c <GPIO_Init+0x60>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	795b      	ldrb	r3, [r3, #5]
 8000420:	461a      	mov	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	791b      	ldrb	r3, [r3, #4]
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	fa02 f303 	lsl.w	r3, r2, r3
 800042c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	791b      	ldrb	r3, [r3, #4]
 8000438:	4619      	mov	r1, r3
 800043a:	2303      	movs	r3, #3
 800043c:	408b      	lsls	r3, r1
 800043e:	43db      	mvns	r3, r3
 8000440:	4619      	mov	r1, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	400a      	ands	r2, r1
 8000448:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	6819      	ldr	r1, [r3, #0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	697a      	ldr	r2, [r7, #20]
 8000456:	430a      	orrs	r2, r1
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	e0ca      	b.n	80005f2 <GPIO_Init+0x1f6>

	}
	else
	{
		// we will be right back
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	795b      	ldrb	r3, [r3, #5]
 8000460:	2b04      	cmp	r3, #4
 8000462:	d117      	bne.n	8000494 <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000464:	4b4a      	ldr	r3, [pc, #296]	; (8000590 <GPIO_Init+0x194>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	7912      	ldrb	r2, [r2, #4]
 800046c:	4611      	mov	r1, r2
 800046e:	2201      	movs	r2, #1
 8000470:	408a      	lsls	r2, r1
 8000472:	4611      	mov	r1, r2
 8000474:	4a46      	ldr	r2, [pc, #280]	; (8000590 <GPIO_Init+0x194>)
 8000476:	430b      	orrs	r3, r1
 8000478:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800047a:	4b45      	ldr	r3, [pc, #276]	; (8000590 <GPIO_Init+0x194>)
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	7912      	ldrb	r2, [r2, #4]
 8000482:	4611      	mov	r1, r2
 8000484:	2201      	movs	r2, #1
 8000486:	408a      	lsls	r2, r1
 8000488:	43d2      	mvns	r2, r2
 800048a:	4611      	mov	r1, r2
 800048c:	4a40      	ldr	r2, [pc, #256]	; (8000590 <GPIO_Init+0x194>)
 800048e:	400b      	ands	r3, r1
 8000490:	6093      	str	r3, [r2, #8]
 8000492:	e035      	b.n	8000500 <GPIO_Init+0x104>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	795b      	ldrb	r3, [r3, #5]
 8000498:	2b05      	cmp	r3, #5
 800049a:	d117      	bne.n	80004cc <GPIO_Init+0xd0>
		{
			//2. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800049c:	4b3c      	ldr	r3, [pc, #240]	; (8000590 <GPIO_Init+0x194>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	7912      	ldrb	r2, [r2, #4]
 80004a4:	4611      	mov	r1, r2
 80004a6:	2201      	movs	r2, #1
 80004a8:	408a      	lsls	r2, r1
 80004aa:	4611      	mov	r1, r2
 80004ac:	4a38      	ldr	r2, [pc, #224]	; (8000590 <GPIO_Init+0x194>)
 80004ae:	430b      	orrs	r3, r1
 80004b0:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b2:	4b37      	ldr	r3, [pc, #220]	; (8000590 <GPIO_Init+0x194>)
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	7912      	ldrb	r2, [r2, #4]
 80004ba:	4611      	mov	r1, r2
 80004bc:	2201      	movs	r2, #1
 80004be:	408a      	lsls	r2, r1
 80004c0:	43d2      	mvns	r2, r2
 80004c2:	4611      	mov	r1, r2
 80004c4:	4a32      	ldr	r2, [pc, #200]	; (8000590 <GPIO_Init+0x194>)
 80004c6:	400b      	ands	r3, r1
 80004c8:	6093      	str	r3, [r2, #8]
 80004ca:	e019      	b.n	8000500 <GPIO_Init+0x104>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	795b      	ldrb	r3, [r3, #5]
 80004d0:	2b06      	cmp	r3, #6
 80004d2:	d115      	bne.n	8000500 <GPIO_Init+0x104>
		{
			//3. configure both the FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d4:	4b2e      	ldr	r3, [pc, #184]	; (8000590 <GPIO_Init+0x194>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	7912      	ldrb	r2, [r2, #4]
 80004dc:	4611      	mov	r1, r2
 80004de:	2201      	movs	r2, #1
 80004e0:	408a      	lsls	r2, r1
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a2a      	ldr	r2, [pc, #168]	; (8000590 <GPIO_Init+0x194>)
 80004e6:	430b      	orrs	r3, r1
 80004e8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ea:	4b29      	ldr	r3, [pc, #164]	; (8000590 <GPIO_Init+0x194>)
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	7912      	ldrb	r2, [r2, #4]
 80004f2:	4611      	mov	r1, r2
 80004f4:	2201      	movs	r2, #1
 80004f6:	408a      	lsls	r2, r1
 80004f8:	4611      	mov	r1, r2
 80004fa:	4a25      	ldr	r2, [pc, #148]	; (8000590 <GPIO_Init+0x194>)
 80004fc:	430b      	orrs	r3, r1
 80004fe:	6093      	str	r3, [r2, #8]
		}
		//2. configure the GPIO port selection in SYSCFG_EXTIR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	791b      	ldrb	r3, [r3, #4]
 8000504:	089b      	lsrs	r3, r3, #2
 8000506:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	791b      	ldrb	r3, [r3, #4]
 800050c:	f003 0303 	and.w	r3, r3, #3
 8000510:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a1f      	ldr	r2, [pc, #124]	; (8000594 <GPIO_Init+0x198>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d04d      	beq.n	80005b8 <GPIO_Init+0x1bc>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a1d      	ldr	r2, [pc, #116]	; (8000598 <GPIO_Init+0x19c>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d032      	beq.n	800058c <GPIO_Init+0x190>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a1c      	ldr	r2, [pc, #112]	; (800059c <GPIO_Init+0x1a0>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d02b      	beq.n	8000588 <GPIO_Init+0x18c>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a1a      	ldr	r2, [pc, #104]	; (80005a0 <GPIO_Init+0x1a4>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d024      	beq.n	8000584 <GPIO_Init+0x188>
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a19      	ldr	r2, [pc, #100]	; (80005a4 <GPIO_Init+0x1a8>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d01d      	beq.n	8000580 <GPIO_Init+0x184>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <GPIO_Init+0x1ac>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d016      	beq.n	800057c <GPIO_Init+0x180>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a16      	ldr	r2, [pc, #88]	; (80005ac <GPIO_Init+0x1b0>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d00f      	beq.n	8000578 <GPIO_Init+0x17c>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <GPIO_Init+0x1b4>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d008      	beq.n	8000574 <GPIO_Init+0x178>
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a13      	ldr	r2, [pc, #76]	; (80005b4 <GPIO_Init+0x1b8>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d101      	bne.n	8000570 <GPIO_Init+0x174>
 800056c:	2308      	movs	r3, #8
 800056e:	e024      	b.n	80005ba <GPIO_Init+0x1be>
 8000570:	2300      	movs	r3, #0
 8000572:	e022      	b.n	80005ba <GPIO_Init+0x1be>
 8000574:	2307      	movs	r3, #7
 8000576:	e020      	b.n	80005ba <GPIO_Init+0x1be>
 8000578:	2306      	movs	r3, #6
 800057a:	e01e      	b.n	80005ba <GPIO_Init+0x1be>
 800057c:	2305      	movs	r3, #5
 800057e:	e01c      	b.n	80005ba <GPIO_Init+0x1be>
 8000580:	2304      	movs	r3, #4
 8000582:	e01a      	b.n	80005ba <GPIO_Init+0x1be>
 8000584:	2303      	movs	r3, #3
 8000586:	e018      	b.n	80005ba <GPIO_Init+0x1be>
 8000588:	2302      	movs	r3, #2
 800058a:	e016      	b.n	80005ba <GPIO_Init+0x1be>
 800058c:	2301      	movs	r3, #1
 800058e:	e014      	b.n	80005ba <GPIO_Init+0x1be>
 8000590:	40013c00 	.word	0x40013c00
 8000594:	40020000 	.word	0x40020000
 8000598:	40020400 	.word	0x40020400
 800059c:	40020800 	.word	0x40020800
 80005a0:	40020c00 	.word	0x40020c00
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40021400 	.word	0x40021400
 80005ac:	40021800 	.word	0x40021800
 80005b0:	40021c00 	.word	0x40021c00
 80005b4:	40022000 	.word	0x40022000
 80005b8:	2300      	movs	r3, #0
 80005ba:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005bc:	4b5f      	ldr	r3, [pc, #380]	; (800073c <GPIO_Init+0x340>)
 80005be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005c0:	4a5e      	ldr	r2, [pc, #376]	; (800073c <GPIO_Init+0x340>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c6:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80005c8:	7c7a      	ldrb	r2, [r7, #17]
 80005ca:	7cbb      	ldrb	r3, [r7, #18]
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	fa02 f103 	lsl.w	r1, r2, r3
 80005d2:	4a5b      	ldr	r2, [pc, #364]	; (8000740 <GPIO_Init+0x344>)
 80005d4:	7cfb      	ldrb	r3, [r7, #19]
 80005d6:	3304      	adds	r3, #4
 80005d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//3. enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005dc:	4b59      	ldr	r3, [pc, #356]	; (8000744 <GPIO_Init+0x348>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	7912      	ldrb	r2, [r2, #4]
 80005e4:	4611      	mov	r1, r2
 80005e6:	2201      	movs	r2, #1
 80005e8:	408a      	lsls	r2, r1
 80005ea:	4611      	mov	r1, r2
 80005ec:	4a55      	ldr	r2, [pc, #340]	; (8000744 <GPIO_Init+0x348>)
 80005ee:	430b      	orrs	r3, r1
 80005f0:	6013      	str	r3, [r2, #0]
	}
	//2. configure the speed
	temp = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	799b      	ldrb	r3, [r3, #6]
 80005fa:	461a      	mov	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	689a      	ldr	r2, [r3, #8]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	4619      	mov	r1, r3
 8000614:	2303      	movs	r3, #3
 8000616:	408b      	lsls	r3, r1
 8000618:	43db      	mvns	r3, r3
 800061a:	4619      	mov	r1, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	400a      	ands	r2, r1
 8000622:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6899      	ldr	r1, [r3, #8]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	697a      	ldr	r2, [r7, #20]
 8000630:	430a      	orrs	r2, r1
 8000632:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings.
	temp = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	79db      	ldrb	r3, [r3, #7]
 800063c:	461a      	mov	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	791b      	ldrb	r3, [r3, #4]
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	68da      	ldr	r2, [r3, #12]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	4619      	mov	r1, r3
 8000656:	2303      	movs	r3, #3
 8000658:	408b      	lsls	r3, r1
 800065a:	43db      	mvns	r3, r3
 800065c:	4619      	mov	r1, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	400a      	ands	r2, r1
 8000664:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	68d9      	ldr	r1, [r3, #12]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	697a      	ldr	r2, [r7, #20]
 8000672:	430a      	orrs	r2, r1
 8000674:	60da      	str	r2, [r3, #12]

	//4. configure the optype
	temp = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7a1b      	ldrb	r3, [r3, #8]
 800067e:	461a      	mov	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	685a      	ldr	r2, [r3, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	4619      	mov	r1, r3
 8000698:	2301      	movs	r3, #1
 800069a:	408b      	lsls	r3, r1
 800069c:	43db      	mvns	r3, r3
 800069e:	4619      	mov	r1, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	400a      	ands	r2, r1
 80006a6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6859      	ldr	r1, [r3, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	697a      	ldr	r2, [r7, #20]
 80006b4:	430a      	orrs	r2, r1
 80006b6:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode == GPIO_MODE_ALTFN)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	7a5b      	ldrb	r3, [r3, #9]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d138      	bne.n	8000732 <GPIO_Init+0x336>
	{
		uint32_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	791b      	ldrb	r3, [r3, #4]
 80006c4:	08db      	lsrs	r3, r3, #3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	791b      	ldrb	r3, [r3, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xFF << (4 * temp2));
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3308      	adds	r3, #8
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4413      	add	r3, r2
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	0092      	lsls	r2, r2, #2
 80006e6:	21ff      	movs	r1, #255	; 0xff
 80006e8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ec:	43d2      	mvns	r2, r2
 80006ee:	4610      	mov	r0, r2
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	6811      	ldr	r1, [r2, #0]
 80006f4:	ea03 0200 	and.w	r2, r3, r0
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3308      	adds	r3, #8
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	440b      	add	r3, r1
 8000700:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	3308      	adds	r3, #8
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	7a52      	ldrb	r2, [r2, #9]
 8000714:	4611      	mov	r1, r2
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	0092      	lsls	r2, r2, #2
 800071a:	fa01 f202 	lsl.w	r2, r1, r2
 800071e:	4610      	mov	r0, r2
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	6811      	ldr	r1, [r2, #0]
 8000724:	ea43 0200 	orr.w	r2, r3, r0
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3308      	adds	r3, #8
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	440b      	add	r3, r1
 8000730:	605a      	str	r2, [r3, #4]
	}
}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40013800 	.word	0x40013800
 8000744:	40013c00 	.word	0x40013c00

08000748 <SPI_Init>:
#include "stm32f4xx_spi_driver.h"
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_rxe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	// ENABLE SPI PERIPHERAL CLOCK
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2101      	movs	r1, #1
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f85a 	bl	8000810 <SPI_PeriClockControl>
	uint32_t temp_reg = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
	//1. config the device mode
	temp_reg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	461a      	mov	r2, r3
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4313      	orrs	r3, r2
 800076c:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 &= ~(0x1 << 2);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f022 0204 	bic.w	r2, r2, #4
 800077c:	601a      	str	r2, [r3, #0]
	pSPIHandle->pSPIx->CR1 |= temp_reg;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	6819      	ldr	r1, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	430a      	orrs	r2, r1
 800078c:	601a      	str	r2, [r3, #0]

	//2. config the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	795b      	ldrb	r3, [r3, #5]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d104      	bne.n	80007a0 <SPI_Init+0x58>
	{
		temp_reg &= ~(1 << 15);
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	e014      	b.n	80007ca <SPI_Init+0x82>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	795b      	ldrb	r3, [r3, #5]
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	d104      	bne.n	80007b2 <SPI_Init+0x6a>
	{
		temp_reg |= (1 << 15);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	e00b      	b.n	80007ca <SPI_Init+0x82>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	795b      	ldrb	r3, [r3, #5]
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d107      	bne.n	80007ca <SPI_Init+0x82>
	{
		temp_reg &= ~(1 << 15);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007c0:	60fb      	str	r3, [r7, #12]
		temp_reg |= (1 << 10);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007c8:	60fb      	str	r3, [r7, #12]
	}

	//3. config the spi serial clock speed (baudrate)
	temp_reg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	799b      	ldrb	r3, [r3, #6]
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	461a      	mov	r2, r3
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]

	//4. config the DFF
	temp_reg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	79db      	ldrb	r3, [r3, #7]
 80007dc:	02db      	lsls	r3, r3, #11
 80007de:	461a      	mov	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]

	//5. config the CPOL
	temp_reg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	7a1b      	ldrb	r3, [r3, #8]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	461a      	mov	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	60fb      	str	r3, [r7, #12]

	//6. config the CPHA
	temp_reg |= pSPIHandle->SPIConfig.SPI_CPHA << 0;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7a5b      	ldrb	r3, [r3, #9]
 80007f8:	461a      	mov	r2, r3
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	60fb      	str	r3, [r7, #12]

	//pSPIHandle->pSPIx->CR1 &= ~(0xFF);
	pSPIHandle->pSPIx->CR1 = temp_reg;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	601a      	str	r2, [r3, #0]
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <SPI_PeriClockControl>:

//
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d11f      	bne.n	8000862 <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a12      	ldr	r2, [pc, #72]	; (8000870 <SPI_PeriClockControl+0x60>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d106      	bne.n	8000838 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <SPI_PeriClockControl+0x64>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	4a11      	ldr	r2, [pc, #68]	; (8000874 <SPI_PeriClockControl+0x64>)
 8000830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000834:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{

	}
}
 8000836:	e014      	b.n	8000862 <SPI_PeriClockControl+0x52>
		else if (pSPIx == SPI2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <SPI_PeriClockControl+0x68>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d106      	bne.n	800084e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <SPI_PeriClockControl+0x64>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <SPI_PeriClockControl+0x64>)
 8000846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800084c:	e009      	b.n	8000862 <SPI_PeriClockControl+0x52>
		else if(pSPIx == SPI3)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SPI_PeriClockControl+0x6c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d105      	bne.n	8000862 <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <SPI_PeriClockControl+0x64>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a06      	ldr	r2, [pc, #24]	; (8000874 <SPI_PeriClockControl+0x64>)
 800085c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40013000 	.word	0x40013000
 8000874:	40023800 	.word	0x40023800
 8000878:	40003800 	.word	0x40003800
 800087c:	40003c00 	.word	0x40003c00

08000880 <SPI_PeripheralControl>:
//
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d106      	bne.n	80008a0 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 800089e:	e005      	b.n	80008ac <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <SPI_GetFlagStatus>:
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	4013      	ands	r3, r2
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e000      	b.n	80008d4 <SPI_GetFlagStatus+0x1c>
	}
	else
	{
		return FLAG_RESET;
 80008d2:	2300      	movs	r3, #0
	}
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SPI_SendData>:
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
	//1. check the len of data
	while(Len > 0)
 80008ec:	e027      	b.n	800093e <SPI_SendData+0x5e>
	{
		//2. wait the TxFlag
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 80008ee:	bf00      	nop
 80008f0:	2102      	movs	r1, #2
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	f7ff ffe0 	bl	80008b8 <SPI_GetFlagStatus>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0f8      	beq.n	80008f0 <SPI_SendData+0x10>
		//3. check the DFF bit
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000906:	2b00      	cmp	r3, #0
 8000908:	d00e      	beq.n	8000928 <SPI_SendData+0x48>
		{
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	60da      	str	r2, [r3, #12]
			Len--;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3b01      	subs	r3, #1
 8000918:	607b      	str	r3, [r7, #4]
			Len--;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3b01      	subs	r3, #1
 800091e:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	3301      	adds	r3, #1
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	e00a      	b.n	800093e <SPI_SendData+0x5e>
		}
		else
		{
			pSPIx->DR = *pTxBuffer;
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	60da      	str	r2, [r3, #12]
			Len--;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3b01      	subs	r3, #1
 8000936:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	3301      	adds	r3, #1
 800093c:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1d4      	bne.n	80008ee <SPI_SendData+0xe>
		}

	}
}
 8000944:	bf00      	nop
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <__libc_init_array>:
 8000950:	b570      	push	{r4, r5, r6, lr}
 8000952:	4d0d      	ldr	r5, [pc, #52]	; (8000988 <__libc_init_array+0x38>)
 8000954:	4c0d      	ldr	r4, [pc, #52]	; (800098c <__libc_init_array+0x3c>)
 8000956:	1b64      	subs	r4, r4, r5
 8000958:	10a4      	asrs	r4, r4, #2
 800095a:	2600      	movs	r6, #0
 800095c:	42a6      	cmp	r6, r4
 800095e:	d109      	bne.n	8000974 <__libc_init_array+0x24>
 8000960:	4d0b      	ldr	r5, [pc, #44]	; (8000990 <__libc_init_array+0x40>)
 8000962:	4c0c      	ldr	r4, [pc, #48]	; (8000994 <__libc_init_array+0x44>)
 8000964:	f000 f818 	bl	8000998 <_init>
 8000968:	1b64      	subs	r4, r4, r5
 800096a:	10a4      	asrs	r4, r4, #2
 800096c:	2600      	movs	r6, #0
 800096e:	42a6      	cmp	r6, r4
 8000970:	d105      	bne.n	800097e <__libc_init_array+0x2e>
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f855 3b04 	ldr.w	r3, [r5], #4
 8000978:	4798      	blx	r3
 800097a:	3601      	adds	r6, #1
 800097c:	e7ee      	b.n	800095c <__libc_init_array+0xc>
 800097e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000982:	4798      	blx	r3
 8000984:	3601      	adds	r6, #1
 8000986:	e7f2      	b.n	800096e <__libc_init_array+0x1e>
 8000988:	080009bc 	.word	0x080009bc
 800098c:	080009bc 	.word	0x080009bc
 8000990:	080009bc 	.word	0x080009bc
 8000994:	080009c0 	.word	0x080009c0

08000998 <_init>:
 8000998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099a:	bf00      	nop
 800099c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800099e:	bc08      	pop	{r3}
 80009a0:	469e      	mov	lr, r3
 80009a2:	4770      	bx	lr

080009a4 <_fini>:
 80009a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a6:	bf00      	nop
 80009a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009aa:	bc08      	pop	{r3}
 80009ac:	469e      	mov	lr, r3
 80009ae:	4770      	bx	lr
